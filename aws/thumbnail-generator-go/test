"IyBXZWxjb21lIHRvIFNlcnZlcmxlc3MhIyMgVGhpcyBmaWxlIGlzIHRoZSBtYWluIGNvbmZpZyBmaWxlIGZvciB5b3VyIHNlcnZpY2UuIyBJdCdzIHZlcnkgbWluaW1hbCBhdCB0aGlzIHBvaW50IGFuZCB1c2VzIGRlZmF1bHQgdmFsdWVzLiMgWW91IGNhbiBhbHdheXMgYWRkIG1vcmUgY29uZmlnIG9wdGlvbnMgZm9yIG1vcmUgY29udHJvbC4jIFdlJ3ZlIGluY2x1ZGVkIHNvbWUgY29tbWVudGVkIG91dCBjb25maWcgZXhhbXBsZXMgaGVyZS4jIEp1c3QgdW5jb21tZW50IGFueSBvZiB0aGVtIHRvIGdldCB0aGF0IGNvbmZpZyBvcHRpb24uIyMgRm9yIGZ1bGwgY29uZmlnIG9wdGlvbnMsIGNoZWNrIHRoZSBkb2NzOiMgICAgZG9jcy5zZXJ2ZXJsZXNzLmNvbSMjIEhhcHB5IENvZGluZyFzZXJ2aWNlOiB0Z2VuLWdvICMgTk9URTogdXBkYXRlIHRoaXMgd2l0aCB5b3VyIHNlcnZpY2UgbmFtZSMgWW91IGNhbiBwaW4geW91ciBzZXJ2aWNlIHRvIG9ubHkgZGVwbG95IHdpdGggYSBzcGVjaWZpYyBTZXJ2ZXJsZXNzIHZlcnNpb24jIENoZWNrIG91dCBvdXIgZG9jcyBmb3IgbW9yZSBkZXRhaWxzIyBmcmFtZXdvcmtWZXJzaW9uOiAiPVguWC5YImZyYW1ld29ya1ZlcnNpb246ICI+PTEuMjguMCA8Mi4wLjAicHJvdmlkZXI6ICBuYW1lOiBhd3MgIHJ1bnRpbWU6IGdvMS54IyB5b3UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0cyBoZXJlIyAgc3RhZ2U6IGRldiMgIHJlZ2lvbjogdXMtZWFzdC0xIyB5b3UgY2FuIGFkZCBzdGF0ZW1lbnRzIHRvIHRoZSBMYW1iZGEgZnVuY3Rpb24ncyBJQU0gUm9sZSBoZXJlIyAgaWFtUm9sZVN0YXRlbWVudHM6IyAgICAtIEVmZmVjdDogIkFsbG93IiMgICAgICBBY3Rpb246IyAgICAgICAgLSAiczM6TGlzdEJ1Y2tldCIjICAgICAgUmVzb3VyY2U6IHsgIkZuOjpKb2luIiA6IFsiIiwgWyJhcm46YXdzOnMzOjo6IiwgeyAiUmVmIiA6ICJTZXJ2ZXJsZXNzRGVwbG95bWVudEJ1Y2tldCIgfSBdIF0gIH0jICAgIC0gRWZmZWN0OiAiQWxsb3ciIyAgICAgIEFjdGlvbjojICAgICAgICAtICJzMzpQdXRPYmplY3QiIyAgICAgIFJlc291cmNlOiMgICAgICAgIEZuOjpKb2luOiMgICAgICAgICAgLSAiIiMgICAgICAgICAgLSAtICJhcm46YXdzOnMzOjo6IiMgICAgICAgICAgICAtICJSZWYiIDogIlNlcnZlcmxlc3NEZXBsb3ltZW50QnVja2V0IiMgICAgICAgICAgICAtICIvKiIjIHlvdSBjYW4gZGVmaW5lIHNlcnZpY2Ugd2lkZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaGVyZSMgIGVudmlyb25tZW50OiMgICAgdmFyaWFibGUxOiB2YWx1ZTFwYWNrYWdlOiBleGNsdWRlOiAgIC0gLi8qKiBpbmNsdWRlOiAgIC0gLi9iaW4vKipmdW5jdGlvbnM6ICBoZWxsbzogICAgaGFuZGxlcjogYmluL2hlbGxvICAgIGV2ZW50czogICAgICAtIGh0dHA6ICAgICAgICAgIHBhdGg6IGhlbGxvICAgICAgICAgIG1ldGhvZDogcG9zdCAgd29ybGQ6ICAgIGhhbmRsZXI6IGJpbi93b3JsZCAgICBldmVudHM6ICAgICAgLSBodHRwOiAgICAgICAgICBwYXRoOiB3b3JsZCAgICAgICAgICBtZXRob2Q6IGdldCMgICAgVGhlIGZvbGxvd2luZyBhcmUgYSBmZXcgZXhhbXBsZSBldmVudHMgeW91IGNhbiBjb25maWd1cmUjICAgIE5PVEU6IFBsZWFzZSBtYWtlIHN1cmUgdG8gY2hhbmdlIHlvdXIgaGFuZGxlciBjb2RlIHRvIHdvcmsgd2l0aCB0aG9zZSBldmVudHMjICAgIENoZWNrIHRoZSBldmVudCBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzIyBldmVudHM6IyAgICBldmVudHM6IyAgICAgIC0gaHR0cDojICAgICAgICAgIHBhdGg6IHVzZXJzL2NyZWF0ZSMgICAgICAgICAgbWV0aG9kOiBnZXQjICAgICAgLSBzMzogJHtlbnY6QlVDS0VUfSMgICAgICAtIHNjaGVkdWxlOiByYXRlKDEwIG1pbnV0ZXMpIyAgICAgIC0gc25zOiBncmVldGVyLXRvcGljIyAgICAgIC0gc3RyZWFtOiBhcm46YXdzOmR5bmFtb2RiOnJlZ2lvbjpYWFhYWFg6dGFibGUvZm9vL3N0cmVhbS8xOTcwLTAxLTAxVDAwOjAwOjAwLjAwMCMgICAgICAtIGFsZXhhU2tpbGw6IGFtem4xLmFzay5za2lsbC54eC14eC14eC14eCMgICAgICAtIGFsZXhhU21hcnRIb21lOiBhbXpuMS5hc2suc2tpbGwueHgteHgteHgteHgjICAgICAgLSBpb3Q6IyAgICAgICAgICBzcWw6ICJTRUxFQ1QgKiBGUk9NICdzb21lX3RvcGljJyIjICAgICAgLSBjbG91ZHdhdGNoRXZlbnQ6IyAgICAgICAgICBldmVudDojICAgICAgICAgICAgc291cmNlOiMgICAgICAgICAgICAgIC0gImF3cy5lYzIiIyAgICAgICAgICAgIGRldGFpbC10eXBlOiMgICAgICAgICAgICAgIC0gIkVDMiBJbnN0YW5jZSBTdGF0ZS1jaGFuZ2UgTm90aWZpY2F0aW9uIiMgICAgICAgICAgICBkZXRhaWw6IyAgICAgICAgICAgICAgc3RhdGU6IyAgICAgICAgICAgICAgICAtIHBlbmRpbmcjICAgICAgLSBjbG91ZHdhdGNoTG9nOiAnL2F3cy9sYW1iZGEvaGVsbG8nIyAgICAgIC0gY29nbml0b1VzZXJQb29sOiMgICAgICAgICAgcG9vbDogTXlVc2VyUG9vbCMgICAgICAgICAgdHJpZ2dlcjogUHJlU2lnblVwIyAgICBEZWZpbmUgZnVuY3Rpb24gZW52aXJvbm1lbnQgdmFyaWFibGVzIGhlcmUjICAgIGVudmlyb25tZW50OiMgICAgICB2YXJpYWJsZTI6IHZhbHVlMiMgeW91IGNhbiBhZGQgQ2xvdWRGb3JtYXRpb24gcmVzb3VyY2UgdGVtcGxhdGVzIGhlcmUjcmVzb3VyY2VzOiMgIFJlc291cmNlczojICAgIE5ld1Jlc291cmNlOiMgICAgICBUeXBlOiBBV1M6OlMzOjpCdWNrZXQjICAgICAgUHJvcGVydGllczojICAgICAgICBCdWNrZXROYW1lOiBteS1uZXctYnVja2V0IyAgT3V0cHV0czojICAgICBOZXdPdXRwdXQ6IyAgICAgICBEZXNjcmlwdGlvbjogIkRlc2NyaXB0aW9uIGZvciB0aGUgb3V0cHV0IiMgICAgICAgVmFsdWU6ICJTb21lIG91dHB1dCB2YWx1ZSI="
